name: Auto Translate Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**/*.md'
      - '!docs/**/i18n/**'  # Ignore already translated files
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**/*.md'
      - '!docs/**/i18n/**'
  workflow_dispatch:
    inputs:
      force_translate:
        description: 'Force translate all files'
        required: false
        default: 'false'
        type: boolean
      target_languages:
        description: 'Target languages (comma-separated, e.g., en,ja,ko,fr,de,es)'
        required: false
        default: 'en,ja,ko,fr,de,es'
        type: string

jobs:
  translate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff detection
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create translation config if not exists
      run: |
        if [ ! -f ".github/translation-config.json" ]; then
          echo "Creating default translation config..."
          mkdir -p .github
          cat > .github/translation-config.json << 'EOF'
        {
          "targetLanguages": ["en", "ja", "ko", "fr", "de", "es"],
          "sourceLanguage": "zh",
          "excludePatterns": [
            "**/node_modules/**",
            "**/dist/**",
            "**/build/**",
            "**/.git/**",
            "**/i18n/**"
          ],
          "includePatterns": [
            "docs/**/*.md"
          ],
          "outputDir": "i18n",
          "preserveCodeBlocks": true,
          "preserveLinks": true,
          "maxConcurrentTranslations": 3,
          "retryAttempts": 3,
          "delayBetweenRequests": 1000
        }
        EOF
        fi

    - name: Run translation script
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        FORCE_TRANSLATE: ${{ github.event.inputs.force_translate || 'false' }}
        TARGET_LANGUAGES: ${{ github.event.inputs.target_languages || '' }}
      run: node .github/scripts/translate.js

    - name: Check for changes
      id: check_changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Found translation changes"
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No translation changes found"
        fi

    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/**/i18n/
        git commit -m "🌐 Auto-translate documentation

        - Updated translations for modified documentation files
        - Generated by GitHub Actions using Gemini API
        - Target languages: $(echo "${{ github.event.inputs.target_languages || 'en,ja,ko,fr,de,es' }}" | tr ',' ' ')
        
        [skip ci]"
        git push

    - name: Create summary
      if: always()
      run: |
        echo "## 🌐 Translation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check_changes.outputs.changes }}" == "true" ]; then
          echo "✅ **Translation completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes made:" >> $GITHUB_STEP_SUMMARY
          git diff --name-only HEAD~1 HEAD | grep -E "docs/.*/i18n/" | while read file; do
            echo "- 📄 $file" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "ℹ️ **No translation needed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All documentation files are up to date." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Language:** Chinese (zh)" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Languages:** ${{ github.event.inputs.target_languages || 'en,ja,ko,fr,de,es' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Force Translate:** ${{ github.event.inputs.force_translate || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

    - name: Comment on PR
      if: github.event_name == 'pull_request' && steps.check_changes.outputs.changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🌐 Auto-translation completed')
          );
          
          const commentBody = `## 🌐 Auto-translation completed
          
          This PR includes documentation changes that have been automatically translated into multiple languages:
          
          **Target Languages:** ${{ github.event.inputs.target_languages || 'en,ja,ko,fr,de,es' }}
          
          The translated files have been added to the \`i18n\` directories within each documentation section.
          
          ### 📋 What was translated:
          - Modified markdown files in the \`docs/\` directory
          - Preserved code blocks, links, and formatting
          - Maintained document structure and navigation
          
          ### 🔍 Review Notes:
          - Please review the translations for accuracy
          - Code examples and technical terms are preserved as-is
          - Links and references have been maintained
          
          ---
          *Generated by GitHub Actions using Gemini API*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
